[{"D:\\Projects\\Todoist\\todoist-clone\\src\\index.js":"1","D:\\Projects\\Todoist\\todoist-clone\\src\\App.js":"2","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\Todolist.js":"3","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\Todo\\Todo.js":"4","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\AddTodoPanel\\AddTodoPanel.js":"5","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\NoTodoLabel\\NoTodoLabel.js":"6"},{"size":232,"mtime":1614350120888,"results":"7","hashOfConfig":"8"},{"size":193,"mtime":1622576085026,"results":"9","hashOfConfig":"8"},{"size":5667,"mtime":1622565535755,"results":"10","hashOfConfig":"8"},{"size":1779,"mtime":1622563398922,"results":"11","hashOfConfig":"8"},{"size":2983,"mtime":1616424624110,"results":"12","hashOfConfig":"8"},{"size":238,"mtime":1622565015116,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1oloh0m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Projects\\Todoist\\todoist-clone\\src\\index.js",[],["29","30"],"D:\\Projects\\Todoist\\todoist-clone\\src\\App.js",[],"D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\Todolist.js",["31"],"import React, {useEffect, useState} from 'react';\r\nimport Todo from './Todo/Todo';\r\nimport {AiOutlinePlus} from \"react-icons/ai\";\r\nimport {BsChevronDown} from 'react-icons/bs';\r\nimport {IconContext} from \"react-icons\";\r\nimport AddTodoPanel from './AddTodoPanel/AddTodoPanel';\r\nimport NoTodoLabel from './NoTodoLabel/NoTodoLabel';\r\nimport {setConfiguration, Container, Row, Col} from 'react-grid-system';\r\nimport {Collapse} from 'react-collapse';\r\nimport './Todolist.scss';\r\n\r\nsetConfiguration({maxScreenClass: 'xxl'});\r\n\r\n\r\nconst Todolist = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [addTaskOpen, setAddTaskOpen] = useState(false);\r\n    const [doneTodosOpen, setDoneTodosOpen] = useState(false);\r\n\r\n    const sortedTodos = [...todos].sort((firstTodo, secondTodo) => (firstTodo.priority > secondTodo.priority) ? 1 : -1);\r\n\r\n    useEffect(() => {\r\n        getTodos();\r\n    }, []);\r\n\r\n    const getTodos = () => {\r\n        fetch('http://localhost:4000/todos')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setTodos(data);\r\n                if (data.filter(todo => todo.done === false).length === 0)\r\n                    setAddTaskOpen(true);\r\n            })\r\n    };\r\n\r\n    const insertTodo = (newTodo, priority) => {\r\n        let todo = {\r\n            text: newTodo,\r\n            priority: priority,\r\n            done: false\r\n        };\r\n\r\n        console.log('todo', todo);\r\n\r\n        fetch('http://localhost:4000/todos', {\r\n            method: 'POST',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(todo)\r\n        })\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                if (data._id) {\r\n                    getTodos();\r\n                }\r\n            })\r\n            .catch((err) => {console.error(err)})\r\n    };\r\n\r\n    const deleteTodo = (id) => {\r\n        fetch('http://localhost:4000/todos/' + id, {\r\n            method: 'DELETE',\r\n            headers: {'Content-type': 'application/json'},\r\n        })\r\n        .then(res => res.json())\r\n            .then((data) => {\r\n                if (data === true) {\r\n                    getTodos();\r\n                } else {\r\n                    console.error(data);\r\n                }\r\n        })\r\n        .catch((err) => {console.error(err)})\r\n    };\r\n\r\n    const updateTodoDone = (id) => {\r\n        let todoToUpdate = null;\r\n\r\n        todos.map(todo => {\r\n            if (todo._id === id) {\r\n                todo.done = true;\r\n                todoToUpdate = todo;\r\n            }\r\n        });\r\n\r\n        fetch('http://localhost:4000/todos', {\r\n            method: 'PUT',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(todoToUpdate)\r\n        })\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            getTodos();\r\n        })\r\n        .catch((err) => {console.error(err)})\r\n    };\r\n\r\n    return (\r\n        <Container fluid className=\"todolist_panel\">\r\n            <Row justify=\"center\">\r\n                <Col xxl={5} xl={6} md={7} sm={10} xs={11} className=\"todolist-container\">\r\n                    <h3 className=\"project-name\">TODO List</h3>\r\n                    {\r\n                        sortedTodos.filter(todo => todo.done === false).length\r\n                            ? sortedTodos.filter(todo => todo.done === false).map(todo => (\r\n                                <Todo key={todo._id} id={todo._id} text={todo.text} priority={todo.priority} onDoneClick={updateTodoDone} onDeleteClick={deleteTodo}/>))\r\n                            : <NoTodoLabel text={'Add new TODOs!'}/>\r\n                    }\r\n                    {\r\n                        addTaskOpen\r\n                            ? <AddTodoPanel setAddTaskOpen={setAddTaskOpen} addTaskOpen={addTaskOpen} AddTodo={insertTodo}/>\r\n                            : <div className={\"add-task-label\"} onClick={() => setAddTaskOpen(!addTaskOpen)}>\r\n                                <div>\r\n                                    <IconContext.Provider value={{color: \"#DE4C4A\", size: \"18px\"}}>\r\n                                        <div>\r\n                                            <AiOutlinePlus />\r\n                                        </div>\r\n                                    </IconContext.Provider>\r\n                                </div>\r\n                                <span>Add task</span> \r\n                            </div>\r\n                    }\r\n                    <div className=\"done-todos-row\" onClick={() => setDoneTodosOpen(!doneTodosOpen)}>\r\n                        <h4 className=\"done-todos-label\" >Done TODOs</h4>\r\n                        <IconContext.Provider value={{className: doneTodosOpen ? \"done-todos-arrow-icon upside-down\" : \"done-todos-arrow-icon\"}}>\r\n                            <BsChevronDown />\r\n                        </IconContext.Provider>\r\n                    </div>\r\n                    \r\n\r\n                        \r\n                    <Collapse isOpened={doneTodosOpen}>\r\n                    {\r\n                        sortedTodos.filter(todo => todo.done).length ? \r\n                            sortedTodos.filter(todo => todo.done).map(todo => \r\n                                <Todo key={todo._id} id={todo._id} text={todo.text} priority={todo.priority} onDoneClick={updateTodoDone} onDeleteClick={deleteTodo}/>\r\n                            )\r\n                                : <NoTodoLabel text={'There is no TODO to list!'}/>\r\n                    }\r\n                    </Collapse>\r\n                    \r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Todolist;","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\Todo\\Todo.js",["32"],"import React, {useEffect, useState} from 'react';\r\nimport {BiCheck} from \"react-icons/bi\";\r\nimport {RiDeleteBin5Line} from \"react-icons/ri\";\r\nimport {IconContext} from \"react-icons\";\r\nimport classNames from \"classnames\";\r\nimport './Todo.scss';\r\n\r\nconst Todo = ({id, text, priority, onDoneClick, onDeleteClick}) => {\r\n    const [priorityColor, setPriorityColor] = useState(null);\r\n    const [priorityColorHex, setPriorityColorHex] = useState(null);\r\n\r\n    useEffect(() => {\r\n        switch (priority)\r\n        {\r\n            case 1:\r\n                setPriorityColor('red');\r\n                setPriorityColorHex('#DE4C4A');\r\n                break;\r\n            case 2:\r\n                setPriorityColor('yellow');\r\n                setPriorityColorHex('#FB9814');\r\n                break;\r\n            case 3:\r\n                setPriorityColor('blue');\r\n                setPriorityColorHex('#4271B8');\r\n                break;\r\n            default:\r\n                setPriorityColor('grey');\r\n                setPriorityColorHex('#7F7F7F');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <div className={classNames('priority', priorityColor)} onClick={() => onDoneClick(id)}>\r\n                <IconContext.Provider value={{size: \"16px\", color: priorityColorHex ,className: \"checked-icon\" }}>\r\n                    <div>\r\n                        <BiCheck />\r\n                    </div>\r\n                </IconContext.Provider>\r\n            </div>\r\n            <span className=\"todo-text\">{text}</span>\r\n\r\n            <IconContext.Provider value={{size: \"18px\", className: \"delete-icon\" }}>\r\n                <RiDeleteBin5Line onClick={() => onDeleteClick(id)}/>\r\n            </IconContext.Provider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\AddTodoPanel\\AddTodoPanel.js",[],"D:\\Projects\\Todoist\\todoist-clone\\src\\Todo List\\NoTodoLabel\\NoTodoLabel.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":78,"column":24,"nodeType":"39","messageId":"40","endLine":78,"endColumn":26},{"ruleId":"41","severity":1,"message":"42","line":31,"column":8,"nodeType":"43","endLine":31,"endColumn":10,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'priority'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [priority]",{"range":"50","text":"51"},[1056,1058],"[priority]"]